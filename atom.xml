<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Lunatic.red</title>
  
  
  <link href="http://lunatic.red/atom.xml" rel="self"/>
  
  <link href="http://lunatic.red/"/>
  <updated>2025-04-26T07:45:39.410Z</updated>
  <id>http://lunatic.red/</id>
  
  <author>
    <name>fuchse-ohren</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>トップページ</title>
    <link href="http://lunatic.red/2038/01/19/index/"/>
    <id>http://lunatic.red/2038/01/19/index/</id>
    <published>2038-01-18T18:14:07.000Z</published>
    <updated>2025-04-26T07:45:39.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="サイト概要"><a href="#サイト概要" class="headerlink" title="サイト概要"></a>サイト概要</h1><p> このブログにはシステム構築等の技術的なメモを備忘録として残します。  </p><h1 id="自己紹介"><a href="#自己紹介" class="headerlink" title="自己紹介"></a>自己紹介</h1><p>趣味でサーバを立てたり、自宅ネットワークを弄ったりしています</p><p>現在の遊び環境は以下の通り。仮想マシン上で色々動かしてます。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">機種: DELL PowerEdge R430</span><br><span class="line">CPU: Intel Xeon E3-2620v4*1</span><br><span class="line">RAM: 128GB</span><br><span class="line">HDD: 2TB*4</span><br><span class="line">SSD: 240GB*1</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;サイト概要&quot;&gt;&lt;a href=&quot;#サイト概要&quot; class=&quot;headerlink&quot; title=&quot;サイト概要&quot;&gt;&lt;/a&gt;サイト概要&lt;/h1&gt;&lt;p&gt; このブログにはシステム構築等の技術的なメモを備忘録として残します。  &lt;/p&gt;
&lt;h1 id=&quot;自己紹介&quot;&gt;&lt;a </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>ungoogled-chromiumでdアニメストア/Amazon PrimeVideo/Neflix/U-NEXT等を見られるようにする方法</title>
    <link href="http://lunatic.red/2025/04/26/ungoogled-chromium%E3%81%A7d%E3%82%A2%E3%83%8B%E3%83%A1%E3%82%B9%E3%83%88%E3%82%A2-Amazon-PrimeVideo-Neflix-U-NEXT%E7%AD%89%E3%82%92%E8%A6%8B%E3%82%89%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/"/>
    <id>http://lunatic.red/2025/04/26/ungoogled-chromium%E3%81%A7d%E3%82%A2%E3%83%8B%E3%83%A1%E3%82%B9%E3%83%88%E3%82%A2-Amazon-PrimeVideo-Neflix-U-NEXT%E7%AD%89%E3%82%92%E8%A6%8B%E3%82%89%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/</id>
    <published>2025-04-26T07:57:26.000Z</published>
    <updated>2025-04-26T09:04:17.318Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p><code>ungoogled-chromium</code>等のChromium系ブラウザを使用していると，<br>dアニメストア&#x2F;Amazon PrimeVideo&#x2F;Netflix&#x2F;U-NEXTなどの動画配信サービスで<br>次のようなエラーが発生し，動画が見られない現象が発生する事があります．</p><p><img src="/2024/03/10/Invidious%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%92Podman%E4%B8%8A%E3%81%AB%E5%BB%BA%E3%81%A6%E3%82%8B/mazon-PrimeVideo-Neflix-U-NEXT%E7%AD%89%E3%82%92%E8%A6%8B%E3%82%89%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/image.png"></p><p>この記事では，dアニメストアを例にして<code>ungoogled-chromium</code>で動画が再生できるようにしていきます．<br>また，本記事の対象プラットフォームはWindowsのみになります．</p><span id="more"></span><hr><h1 id="解決できるかどうかの確認"><a href="#解決できるかどうかの確認" class="headerlink" title="解決できるかどうかの確認"></a>解決できるかどうかの確認</h1><p>まずは，本記事のやり方で問題が解決できるかを確認します．</p><hr><p><a href="chrome://components">chrome:&#x2F;&#x2F;components</a>を開き，<br><code>Widevine Content Decryption Module</code>の状態が<code>最新</code>や<code>New</code>ではないことを<br>確認してください．(以下の画像では「確認中」となっています)．<br>※特にバージョンが<code>0.0.0.0</code>の場合は解決できる可能性が高いです</p><p><img src="/2024/03/10/Invidious%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%92Podman%E4%B8%8A%E3%81%AB%E5%BB%BA%E3%81%A6%E3%82%8B/mazon-PrimeVideo-Neflix-U-NEXT%E7%AD%89%E3%82%92%E8%A6%8B%E3%82%89%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/image-1.png"></p><hr><p>上記に当てはまる場合，動画が再生できない原因はDRMの可能性が高いです．<br>本来あらゆる知識は公共に属し無制限に活用され得るべきですが，DRMはオープンな暗号技術を用いてこれを阻害します．<br>Chromiumでは<code>Widevine</code>というプラグインがDRMに利用されているため，手動でこのプラグインを導入していきます．  </p><hr><h1 id="Chromiumのインストール先を開く"><a href="#Chromiumのインストール先を開く" class="headerlink" title="Chromiumのインストール先を開く"></a>Chromiumのインストール先を開く</h1><p>一般的にChromiumのインストール先は以下の場所になります．<br><code>C:\Users\%UserName%\AppData\Local\Chromium\Application\</code><br>特にオプションを弄っていない場合は，ここのフォルダを開いてください．</p><p>自分で別の場所を指定している場合は指定した場所を開いてください．</p><hr><p>すると，次のようにバージョン番号ごとにフォルダが存在するので，<strong>一番最新の</strong>バージョン番号のフォルダを開きます．<br><img src="/2024/03/10/Invidious%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%92Podman%E4%B8%8A%E3%81%AB%E5%BB%BA%E3%81%A6%E3%82%8B/mazon-PrimeVideo-Neflix-U-NEXT%E7%AD%89%E3%82%92%E8%A6%8B%E3%82%89%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/image-2.png"></p><hr><p>このようなフォルダが見えていれば正しいパスになります．<br>このフォルダを開いたままにしておいてください．</p><p><img src="/2024/03/10/Invidious%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%92Podman%E4%B8%8A%E3%81%AB%E5%BB%BA%E3%81%A6%E3%82%8B/mazon-PrimeVideo-Neflix-U-NEXT%E7%AD%89%E3%82%92%E8%A6%8B%E3%82%89%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/image-3.png"></p><hr><h1 id="Edgeのインストール先を開く"><a href="#Edgeのインストール先を開く" class="headerlink" title="Edgeのインストール先を開く"></a>Edgeのインストール先を開く</h1><p>Chromiumの時とほぼ同じになります．</p><p>Edgeのインストール先を開きます<br><code>C:\Program Files (x86)\Microsoft\Edge\Application</code>  </p><hr><p>すると，次のようにバージョン番号ごとにフォルダが存在するので，<strong>一番最新の</strong>バージョン番号のフォルダを開きます．<br><img src="/2024/03/10/Invidious%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%92Podman%E4%B8%8A%E3%81%AB%E5%BB%BA%E3%81%A6%E3%82%8B/mazon-PrimeVideo-Neflix-U-NEXT%E7%AD%89%E3%82%92%E8%A6%8B%E3%82%89%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/image-2.png"></p><hr><p>このようなフォルダが見えていれば正しいパスになります．<br>このフォルダを開いたままにしておいてください．</p><p><img src="/2024/03/10/Invidious%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%92Podman%E4%B8%8A%E3%81%AB%E5%BB%BA%E3%81%A6%E3%82%8B/mazon-PrimeVideo-Neflix-U-NEXT%E7%AD%89%E3%82%92%E8%A6%8B%E3%82%89%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/image-3.png"></p><hr><h1 id="EdgeのフォルダからChromiumのフォルダにコピーする"><a href="#EdgeのフォルダからChromiumのフォルダにコピーする" class="headerlink" title="EdgeのフォルダからChromiumのフォルダにコピーする"></a>EdgeのフォルダからChromiumのフォルダにコピーする</h1><p>Edge側のフォルダに入っている<code>WidevineCdm</code>フォルダをChromium側にコピーします．<br>(Ctrlを押しながらドラッグ&amp;ドロップ)</p><p><img src="/2024/03/10/Invidious%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%92Podman%E4%B8%8A%E3%81%AB%E5%BB%BA%E3%81%A6%E3%82%8B/mazon-PrimeVideo-Neflix-U-NEXT%E7%AD%89%E3%82%92%E8%A6%8B%E3%82%89%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/image-4.png"></p><hr><p>Chromiumを起動したままの状態であれば一度閉じてください．</p><hr><h1 id="確認"><a href="#確認" class="headerlink" title="確認"></a>確認</h1><p><a href="chrome://components">chrome:&#x2F;&#x2F;components</a>を開き，<br><code>Widevine Content Decryption Module</code>のバージョンが変化していることを確認してください．<br><img src="/2024/03/10/Invidious%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%92Podman%E4%B8%8A%E3%81%AB%E5%BB%BA%E3%81%A6%E3%82%8B/mazon-PrimeVideo-Neflix-U-NEXT%E7%AD%89%E3%82%92%E8%A6%8B%E3%82%89%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/image-5.png"></p><hr><p>エラーが解消し，動画が再生されれば成功です．<br><img src="/2024/03/10/Invidious%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%92Podman%E4%B8%8A%E3%81%AB%E5%BB%BA%E3%81%A6%E3%82%8B/mazon-PrimeVideo-Neflix-U-NEXT%E7%AD%89%E3%82%92%E8%A6%8B%E3%82%89%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/image-6.png"><br>※スクリーンショットでは動画部分が真っ黒に見えますが実際には再生されています．</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;&lt;code&gt;ungoogled-chromium&lt;/code&gt;等のChromium系ブラウザを使用していると，&lt;br&gt;dアニメストア&amp;#x2F;Amazon PrimeVideo&amp;#x2F;Netflix&amp;#x2F;U-NEXTなどの動画配信サービスで&lt;br&gt;次のようなエラーが発生し，動画が見られない現象が発生する事があります．&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2024/03/10/Invidious%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%92Podman%E4%B8%8A%E3%81%AB%E5%BB%BA%E3%81%A6%E3%82%8B/mazon-PrimeVideo-Neflix-U-NEXT%E7%AD%89%E3%82%92%E8%A6%8B%E3%82%89%E3%82%8C%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%99%E3%82%8B%E6%96%B9%E6%B3%95/image.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;この記事では，dアニメストアを例にして&lt;code&gt;ungoogled-chromium&lt;/code&gt;で動画が再生できるようにしていきます．&lt;br&gt;また，本記事の対象プラットフォームはWindowsのみになります．&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>LGPO.exeでGPO(グループポリシー)をバックアップ・管理する</title>
    <link href="http://lunatic.red/2025/03/13/LGPO-exe%E3%81%A7GPO-%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC-%E3%82%92%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%83%BB%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B/"/>
    <id>http://lunatic.red/2025/03/13/LGPO-exe%E3%81%A7GPO-%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC-%E3%82%92%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%83%BB%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B/</id>
    <published>2025-03-13T13:17:50.000Z</published>
    <updated>2025-04-26T07:45:39.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p><code>LGPO.exe</code>を使ってローカルグループポリシーをバックアップおよび復元する方法と，自作の簡易的なバックアップ管理ツールを紹介します．</p><p>パソコンの移行時やキッティングに活用ください．また，WindowsのProエディションで適用しているGPOをHomeエディションに移植できるという小ネタにもなります．</p><span id="more"></span><h1 id="LGPO-exeのダウンロード"><a href="#LGPO-exeのダウンロード" class="headerlink" title="LGPO.exeのダウンロード"></a><code>LGPO.exe</code>のダウンロード</h1><p><a href="https://www.microsoft.com/en-us/download/details.aspx?id=55319">ダウンロードページ</a>を開き，<code>Downlaod</code>をクリック</p><p><img src="/2025/03/13/LGPO-exe%E3%81%A7GPO-%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC-%E3%82%92%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%83%BB%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B/%7B90DED205-6A7B-4709-82F4-25BEB0A7E0D1%7D.png"></p><hr><p>① <code>LGPO.zip</code> にチェックを入れ<br>② <code>Download</code> をクリック</p><p><img src="/2025/03/13/LGPO-exe%E3%81%A7GPO-%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC-%E3%82%92%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%83%BB%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B/%7B6AE3DFDA-7964-4066-8F6B-7A38C7B11EFF%7D.png"></p><hr><p>ダウンロードした<code>LGPO.exe</code>を任意の場所に展開する</p><h1 id="GPOの保存"><a href="#GPOの保存" class="headerlink" title="GPOの保存"></a>GPOの保存</h1><p>次のコマンドでGPOを保存できます．<br>※保存先のパスはフルパスで指定する必要がありました</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LGPO.exe /b [保存先ディレクトリのフルパス]</span><br></pre></td></tr></table></figure><hr><p>保存先のパスに新しくフォルダが作成され，その中にGPOのバックアップが作成されます．<br>フォルダ名はUUIDv4で指定され，<code>&#123;56880275-2D86-4531-BEE8-AA3B5AF4529A&#125;</code>のような名前になります</p><h1 id="GPOの復元"><a href="#GPOの復元" class="headerlink" title="GPOの復元"></a>GPOの復元</h1><p>次のコマンドで保存されたGPOを復元できます．<br>※保存先のパスはバックアップ時と同じものではなく，バックアップ時に新規作成されるフォルダ名がUUIDv4の物をフルパスで指定する必要がありました．</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LGPO.exe /g [保存先ディレクトリのフルパス]</span><br></pre></td></tr></table></figure><h1 id="簡易的な管理ツール"><a href="#簡易的な管理ツール" class="headerlink" title="簡易的な管理ツール"></a>簡易的な管理ツール</h1><p>著者が作成した簡易的なバックアップ管理ツールの使い方も紹介します．</p><hr><p>はじめに以下のリンク先からPowershellスクリプトを保存します．<br><a href="https://gist.github.com/fuchse-ohren/c199fc2b89f0c34c3c58c0102337ad8c">backupmgr.ps1</a></p><hr><p>①<code>Raw</code>を右クリック<br>②<code>名前をつけてリンク先を保存</code>をクリック<br>保存先を指定するダイアログで<code>LGPO.exe</code>を保存したディレクトリに保存</p><p><img src="/2025/03/13/LGPO-exe%E3%81%A7GPO-%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC-%E3%82%92%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%83%BB%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B/image.png"></p><hr><p><code>backupmgr.ps1</code>を右クリックし，<code>Powershellで実行</code>をクリックするとスクリプトが起動します</p><p><img src="/2025/03/13/LGPO-exe%E3%81%A7GPO-%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC-%E3%82%92%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%83%BB%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B/%7B326790CB-A2A5-4C12-A80C-94FA34F4B7E7%7D.png"></p><h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><p>メニューで<code>1</code>を入力すると，ファイル名の入力を促されます．<br>※デフォルト値はホスト名と日付になっています．</p><p>ファイル名を入力もしくはそのまま<code>Enter</code>を押すと，<br>UACダイアログが立ち上がりバックアップが作成されます．<br>すでに同名のバックアップが存在する場合はエラーが表示されます．</p><p><img src="/2025/03/13/LGPO-exe%E3%81%A7GPO-%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC-%E3%82%92%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%83%BB%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B/%7B3621DEFE-240C-4090-9A6C-E0A4C07993C4%7D.png"></p><h2 id="復元"><a href="#復元" class="headerlink" title="復元"></a>復元</h2><p>メニューで<code>2</code>を入力するとバックアップ一覧が表示され，復元対象の選択を促されます．</p><p>選択対象を入力すると，UACダイアログが立ち上がり復元が行われます．<br><img src="/2025/03/13/LGPO-exe%E3%81%A7GPO-%E3%82%B0%E3%83%AB%E3%83%BC%E3%83%97%E3%83%9D%E3%83%AA%E3%82%B7%E3%83%BC-%E3%82%92%E3%83%90%E3%83%83%E3%82%AF%E3%82%A2%E3%83%83%E3%83%97%E3%83%BB%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B/%7B57CE5C68-85D3-4BD9-A98D-36815B236857%7D.png"></p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://techcommunity.microsoft.com/blog/microsoft-security-baselines/lgpo-exe---local-group-policy-object-utility-v1-0/701045">LGPO.exe - Local Group Policy Object Utility, v1.0 | Microsoft Community Hub</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;&lt;code&gt;LGPO.exe&lt;/code&gt;を使ってローカルグループポリシーをバックアップおよび復元する方法と，自作の簡易的なバックアップ管理ツールを紹介します．&lt;/p&gt;
&lt;p&gt;パソコンの移行時やキッティングに活用ください．また，WindowsのProエディションで適用しているGPOをHomeエディションに移植できるという小ネタにもなります．&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://lunatic.red/categories/Windows/"/>
    
    <category term="設定" scheme="http://lunatic.red/categories/Windows/%E8%A8%AD%E5%AE%9A/"/>
    
    
    <category term="Windows" scheme="http://lunatic.red/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>NFStreamのセットアップ(WSL+OracleLinux9+Python3.12)</title>
    <link href="http://lunatic.red/2025/03/07/NFStream%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97-WSL-OracleLinux9-Python3-12/"/>
    <id>http://lunatic.red/2025/03/07/NFStream%E3%81%AE%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97-WSL-OracleLinux9-Python3-12/</id>
    <published>2025-03-07T07:40:19.000Z</published>
    <updated>2025-04-26T07:45:39.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>通信解析用のフレームワーク「NFStream」をPython 3.12とWSL2環境に対してインストールします。</p><span id="more"></span><h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><p>WSL2にインストールしたOracle Linux 9.1を使用します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/os-release</span></span><br><span class="line">NAME=&quot;Oracle Linux Server&quot;</span><br><span class="line">VERSION=&quot;9.1&quot;</span><br><span class="line">ID=&quot;ol&quot;</span><br><span class="line">ID_LIKE=&quot;fedora&quot;</span><br><span class="line">VARIANT=&quot;Server&quot;</span><br><span class="line">VARIANT_ID=&quot;server&quot;</span><br><span class="line">VERSION_ID=&quot;9.1&quot;</span><br><span class="line">PLATFORM_ID=&quot;platform:el9&quot;</span><br><span class="line">PRETTY_NAME=&quot;Oracle Linux Server 9.1&quot;</span><br><span class="line">ANSI_COLOR=&quot;0;31&quot;</span><br><span class="line">CPE_NAME=&quot;cpe:/o:oracle:linux:9:1:server&quot;</span><br><span class="line">HOME_URL=&quot;https://linux.oracle.com/&quot;</span><br><span class="line">BUG_REPORT_URL=&quot;https://github.com/oracle/oracle-linux&quot;</span><br><span class="line"></span><br><span class="line">ORACLE_BUGZILLA_PRODUCT=&quot;Oracle Linux 9&quot;</span><br><span class="line">ORACLE_BUGZILLA_PRODUCT_VERSION=9.1</span><br><span class="line">ORACLE_SUPPORT_PRODUCT=&quot;Oracle Linux&quot;</span><br><span class="line">ORACLE_SUPPORT_PRODUCT_VERSION=9.1</span><br></pre></td></tr></table></figure><h1 id="セットアップ"><a href="#セットアップ" class="headerlink" title="セットアップ"></a>セットアップ</h1><h2 id="前提パッケージの導入"><a href="#前提パッケージの導入" class="headerlink" title="前提パッケージの導入"></a>前提パッケージの導入</h2><p>WSLに導入したばかりのOracleLinuxには基本的なコマンドや開発ツールが無いため、<br>以下のコマンドで必要なパッケージをインストールします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf group install &quot;Minimal Install&quot;</span><br><span class="line">sudo dnf group install &quot;Development Tools&quot;</span><br><span class="line">sudo dnf install libpcap libpcap-devel --enablerepo=ol9_codeready_builder</span><br></pre></td></tr></table></figure><h2 id="Pythonのインストール"><a href="#Pythonのインストール" class="headerlink" title="Pythonのインストール"></a>Pythonのインストール</h2><p>以下のコマンドでPython3.12を導入し、デフォルトのPythonパッケージに指定します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf install python3.12 python3.12-devel python3.12-libs python3.12-libs python3.12-pip</span><br><span class="line">sudo alternatives --install /usr/bin/python python /usr/bin/python3.12 1</span><br></pre></td></tr></table></figure><h2 id="nfstreamのインストール"><a href="#nfstreamのインストール" class="headerlink" title="nfstreamのインストール"></a>nfstreamのインストール</h2><p>NFStreamのリポジトリをクローンします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone --recurse-submodules https://github.com/nfstream/nfstream.git</span><br><span class="line">cd nfstream</span><br></pre></td></tr></table></figure><p>※記事執筆時点のバージョンで固定する場合</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout a4180aa52fbc9f135b8ecfe039652845047b176b</span><br></pre></td></tr></table></figure><hr><p>スクリプトの誤りを修正します</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed &#x27;s|/tmp/nfstream_build/&#123;usr&#125;/lib/libndpi.a|/tmp/nfstream_build/&#123;usr&#125;/lib64/libndpi.a|g&#x27; -i ./nfstream/engine/engine_build.py</span><br></pre></td></tr></table></figure><p>上記コマンド実行後、差分が次のようになっていれば成功です。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">diff --git a/nfstream/engine/engine_build.py b/nfstream/engine/engine_build.py</span></span><br><span class="line"><span class="comment">index c3bf6a9..8548f6a 100644</span></span><br><span class="line"><span class="comment">--- a/nfstream/engine/engine_build.py</span></span><br><span class="line"><span class="comment">+++ b/nfstream/engine/engine_build.py</span></span><br><span class="line"><span class="meta">@@ -83,7 +83,7 @@</span> INCLUDE_DIRS = [</span><br><span class="line">     &quot;&#123;root&#125;/tmp/nfstream_build/&#123;usr&#125;/include&quot;.format(root=ROOT, usr=USR_LOCAL),</span><br><span class="line"> ]</span><br><span class="line"> EXTRALINK_ARGS = [</span><br><span class="line"><span class="deletion">-    &quot;&#123;root&#125;/tmp/nfstream_build/&#123;usr&#125;/lib/libndpi.a&quot;.format(root=ROOT, usr=USR)</span></span><br><span class="line"><span class="addition">+    &quot;&#123;root&#125;/tmp/nfstream_build/&#123;usr&#125;/lib64/libndpi.a&quot;.format(root=ROOT, usr=USR)</span></span><br><span class="line"> ]</span><br><span class="line"></span><br><span class="line"> if os.name != &quot;posix&quot;:  # Windows</span><br></pre></td></tr></table></figure><hr><p>インストールします</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br><span class="line">python -m pip install -r dev_requirements.txt</span><br><span class="line">python -m pip install .</span><br></pre></td></tr></table></figure><h1 id="テスト"><a href="#テスト" class="headerlink" title="テスト"></a>テスト</h1><p>サンプルとなるcapファイルをダウンロードします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">wget https://wiki.wireshark.org/uploads/27707187aeb30df68e70c8fb9d614981/http.cap</span><br></pre></td></tr></table></figure><hr><p>以下のpythonスクリプトを<code>nfstream_test.py</code>のファイル名で保存</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">from nfstream import NFStreamer</span><br><span class="line">s = NFStreamer(source=&quot;http.cap&quot;)</span><br><span class="line">for flow in s :</span><br><span class="line">    print(flow)</span><br></pre></td></tr></table></figure><hr><p>保存した<code>nfstream_test.py</code>を実行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">python nfstream_test.py</span><br><span class="line"></span><br><span class="line">NFlow(id=0,</span><br><span class="line">      expiration_id=0,</span><br><span class="line">      src_ip=145.254.160.237,</span><br><span class="line">      src_mac=00:00:01:00:00:00,</span><br><span class="line">      src_oui=00:00:01,</span><br><span class="line">      src_port=3372,</span><br><span class="line">      dst_ip=65.208.228.223,</span><br><span class="line">      dst_mac=fe:ff:20:00:01:00,</span><br><span class="line">(中略)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;通信解析用のフレームワーク「NFStream」をPython 3.12とWSL2環境に対してインストールします。&lt;/p&gt;</summary>
    
    
    
    <category term="Linux" scheme="http://lunatic.red/categories/Linux/"/>
    
    <category term="環境構築" scheme="http://lunatic.red/categories/Linux/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/"/>
    
    
    <category term="Linux" scheme="http://lunatic.red/tags/Linux/"/>
    
    <category term="ネットワーク" scheme="http://lunatic.red/tags/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"/>
    
  </entry>
  
  <entry>
    <title>LibreOffice Drawを使ってPDF文書をPDF/A形式に変換する</title>
    <link href="http://lunatic.red/2025/03/05/LibreOffice-Draw%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6PDF%E6%96%87%E6%9B%B8%E3%82%92PDF-A%E5%BD%A2%E5%BC%8F%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B/"/>
    <id>http://lunatic.red/2025/03/05/LibreOffice-Draw%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6PDF%E6%96%87%E6%9B%B8%E3%82%92PDF-A%E5%BD%A2%E5%BC%8F%E3%81%AB%E5%A4%89%E6%8F%9B%E3%81%99%E3%82%8B/</id>
    <published>2025-03-05T14:30:25.000Z</published>
    <updated>2025-04-26T07:45:39.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>PDFをPDF&#x2F;A規格に準拠した形に変換します.  </p><span id="more"></span><hr><h1 id="LibreOffice-Draw"><a href="#LibreOffice-Draw" class="headerlink" title="LibreOffice Draw"></a>LibreOffice Draw</h1><p>LibreOffice Drawは無料で利用できる作図ソフトです．<br>あまり知られていませんが，強力なPDF編集ツールになります．<br>今回はそんなLibreOffice Drawを使って通常のPDF文書をPDF&#x2F;Aに準拠した形に変換します．</p><hr><h1 id="PDF文書をPDF-A形式に変換"><a href="#PDF文書をPDF-A形式に変換" class="headerlink" title="PDF文書をPDF&#x2F;A形式に変換"></a>PDF文書をPDF&#x2F;A形式に変換</h1><ol><li>LibreOffice DrawでPDFファイルを開く</li><li>「ファイル」-&gt;「次の形式でエクスポート」-&gt;「PDFとしてエクスポート」の順にクリック</li><li>PDFオプションの「全般」の項目で「アーカイブ」にチェックを付ける</li><li>PDF&#x2F;Aバージョンを選択する<br><a href="https://ja.wikipedia.org/wiki/PDF/A">PDF&#x2F;AバージョンについてはWikipediaを参照してください</a></li><li>「エクスポート」ボタンをクリックして保存先を指定する</li></ol><p>上記の手順でPDF&#x2F;A形式への変換が行えます．<br>領収書等の提出などをPDF&#x2F;A形式で求められた際にご活用下さい</p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;PDFをPDF&amp;#x2F;A規格に準拠した形に変換します.  &lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://lunatic.red/categories/Windows/"/>
    
    <category term="Office" scheme="http://lunatic.red/categories/Windows/Office/"/>
    
    
    <category term="Windows" scheme="http://lunatic.red/tags/Windows/"/>
    
  </entry>
  
  <entry>
    <title>WindowsでYubikeyを使ってSSH鍵を管理する(ssh-agent周りの設定)</title>
    <link href="http://lunatic.red/2024/09/26/Windows%E3%81%A7Yubikey%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6SSH%E9%8D%B5%E3%82%92%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B-ssh-agent%E5%91%A8%E3%82%8A%E3%81%AE%E8%A8%AD%E5%AE%9A/"/>
    <id>http://lunatic.red/2024/09/26/Windows%E3%81%A7Yubikey%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6SSH%E9%8D%B5%E3%82%92%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B-ssh-agent%E5%91%A8%E3%82%8A%E3%81%AE%E8%A8%AD%E5%AE%9A/</id>
    <published>2024-09-25T20:29:00.000Z</published>
    <updated>2025-04-26T07:45:39.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>YubikeyのOpenPGP機能を利用してSSH秘密鍵を管理したい。<br>その際、ssh-agenの設定が難しかったので、一番簡単だと思うやり方を紹介します。</p><p>鍵の生成は以下の記事を参考にすれば特に難しくはなかったので、鍵生成が済んでいてYubikeyへの書き込みが終わっている前提で話を進めます。<br><a href="https://keens.github.io/blog/2021/03/23/yubikeywotsukau_openpghen/">YubikeyでOpenPGP鍵をセキュアに使う | κeenのHappy Hacκing Blog</a></p><span id="more"></span><hr><h1 id="ssh-agentの無効化"><a href="#ssh-agentの無効化" class="headerlink" title="ssh-agentの無効化"></a>ssh-agentの無効化</h1><p><code>田+R</code>キーを押して「ファイル名を指定して実行」ウィンドウを開きます。<br><code>services.msc</code>と入力し、<code>OK</code>をクリック  </p><p><img src="/2024/09/26/Windows%E3%81%A7Yubikey%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6SSH%E9%8D%B5%E3%82%92%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B-ssh-agent%E5%91%A8%E3%82%8A%E3%81%AE%E8%A8%AD%E5%AE%9A/image.png"></p><hr><p><code>OpenSSH Authentication Agent</code>というサービスをダブルクリックし、スタートアップの種類を<code>無効</code>にします。<br>※実行中の場合は<code>停止</code>ボダンで殺しておいてください。</p><p><img src="/2024/09/26/Windows%E3%81%A7Yubikey%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6SSH%E9%8D%B5%E3%82%92%E7%AE%A1%E7%90%86%E3%81%99%E3%82%8B-ssh-agent%E5%91%A8%E3%82%8A%E3%81%AE%E8%A8%AD%E5%AE%9A/image-1.png"></p><h1 id="wsl-ssh-pagentの導入"><a href="#wsl-ssh-pagentの導入" class="headerlink" title="wsl-ssh-pagentの導入"></a><code>wsl-ssh-pagent</code>の導入</h1><p><a href="https://github.com/benpye/wsl-ssh-pageant/releases">wsl-ssh-pagentのリリースページ</a>から最新の<code>wsl-ssh-pageant-amd64-gui.exe</code>をダウンロードします。</p><hr><p>ダウンロードしたら適当なディレクトリに配置してください。<br>今回は<code>C:\bin\wsl-ssh-pageant-amd64-gui.exe</code>に配置しました。</p><hr><p>wsl-ssh-pagentの自動起動設定を行います。<br>タスクスケジューラを立ち上げ、右側のリストから<code>タスクの作成</code>をクリックします。<br>新しいタスクを次のように作成してください</p><ul><li><p>全般タブ  </p><ul><li><code>ssh-agent</code>など任意の名前を入力</li><li>「ユーザーがログインしているときのみ実行する」から変更しない</li></ul></li><li><p>トリガータブ<br>左下の「新規」をクリックして設定画面を開き、以下のように設定。 </p><ul><li>タスクの開始:ログオン時</li><li>設定: 任意のユーザー</li><li>有効: チェックを入れる</li></ul></li><li><p>操作タブ<br>左下の「新規」をクリックして設定画面を開き、以下のように設定。  </p><ul><li>操作: プログラムの開始</li><li>プログラム: 先ほど配置した<code>C:\bin\wsl-ssh-pageant-amd64-gui.exe</code>を入力(もしくは「参照…」をクリックして検索)</li><li>引数の追加: <code>--systray --winssh openssh-ssh-agent</code><br>※タスクトレイに常駐させたくない場合は<code>--winssh openssh-ssh-agent</code></li></ul></li></ul><h1 id="gpg-agentの設定"><a href="#gpg-agentの設定" class="headerlink" title="gpg-agentの設定"></a>gpg-agentの設定</h1><p>Kleopatlaを立ち上げ、<code>設定</code> -&gt; <code>Kleopatlaを設定</code>の順でクリックします</p><hr><p>新しいウィンドウが開くので、<br>左側の錠前のアイコン<code>GnuPGシステム</code>をクリック。<br><code>プライベート鍵</code>タブから、<code>puttyサポートを有効にする</code>のチェックを入れます。  </p><p>最後に<code>OK</code>をクリックして終了します</p><hr><p>gpg-agentの自動起動設定を行います。<br>タスクスケジューラを立ち上げ、右側のリストから<code>タスクの作成</code>をクリックします。<br>新しいタスクを次のように作成してください</p><ul><li><p>全般タブ  </p><ul><li><code>gpg-agent</code>など任意の名前を入力</li><li>「ユーザーがログインしているときのみ実行する」から変更しない</li></ul></li><li><p>トリガータブ<br>左下の「新規」をクリックして設定画面を開き、以下のように設定。  </p><ul><li>タスクの開始:ログオン時</li><li>設定: 任意のユーザー</li><li>有効: チェックを入れる</li></ul></li><li><p>操作タブ<br>左下の「新規」をクリックして設定画面を開き、以下のように設定。  </p><ul><li>操作: プログラムの開始</li><li>プログラム: <code>&quot;C:\Program Files (x86)\GnuPG\bin\gpg-connect-agent.exe&quot;</code>を入力(もしくは「参照…」をクリックして検索)</li><li>引数の追加: <code>updatestartuptty /bye</code></li></ul></li></ul><h1 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h1><p>ターミナル上で<code>ssh-add -L</code>を入力します。<br>このとき、Yubikeyが刺さっていれば公開鍵が表示されるはずです。<br>ここで表示した公開鍵をサーバに追加して利用してください。</p><h1 id="おまけ-Git-for-Windowsでの使い方"><a href="#おまけ-Git-for-Windowsでの使い方" class="headerlink" title="(おまけ) Git for Windowsでの使い方"></a>(おまけ) Git for Windowsでの使い方</h1><p>以下の設定を行い、CygWinから内蔵のOpenSSHにsshクライアントを切り替える。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.sshCommand &quot;C:/Windows/System32/OpenSSH/ssh.exe&quot;</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://keens.github.io/blog/2021/03/23/yubikeywotsukau_openpghen/">YubikeyでOpenPGP鍵をセキュアに使う | κeenのHappy Hacκing Blog</a></p><p><a href="https://github.com/benpye/wsl-ssh-pageant/">benpye&#x2F;wsl-ssh-pageant: A Pageant -&gt; TCP bridge for use with WSL, allowing for Pageant to be used as an ssh-ageant within the WSL environment.</a></p><p><a href="https://qiita.com/slotport/items/e1d5a5dbd3aa7c6a2a24">混沌を極めるWindowsのssh-agent事情 #Windows - Qiita</a></p><p><a href="https://www.lisz-works.com/entry/git-windows10-openssh">GitをWindows10のOpenSSHを使うように設定する - lisz-works</a></p><hr><p><code>OpenSSH Authentication Agent</code>というサービスをダブルクリックし、スタートアップの種類を<code>無効</code>にします。</p><hr><p>実行中の場合は<code>停止</code>ボダンで殺しておいてください。</p><h1 id="wsl-ssh-pagentの導入-1"><a href="#wsl-ssh-pagentの導入-1" class="headerlink" title="wsl-ssh-pagentの導入"></a><code>wsl-ssh-pagent</code>の導入</h1><p><a href="https://github.com/benpye/wsl-ssh-pageant/releases">wsl-ssh-pagentのリリースページ</a>から最新の<code>wsl-ssh-pageant-amd64-gui.exe</code>をダウンロードします。</p><hr><p>ダウンロードしたら適当なディレクトリに配置してください。<br>今回は<code>C:\bin\wsl-ssh-pageant-amd64-gui.exe</code>に配置しました。</p><hr><p>wsl-ssh-pagentの自動起動設定を行います。<br>タスクスケジューラを立ち上げ、右側のリストから<code>タスクの作成</code>をクリックします。<br>新しいタスクを次のように作成してください</p><ul><li><p>全般タブ  </p><ul><li><code>ssh-agent</code>など任意の名前を入力</li><li>「ユーザーがログインしているときのみ実行する」から変更しない</li></ul></li><li><p>トリガータブ<br>左下の「新規」をクリックして設定画面を開き、以下のように設定。 </p><ul><li>タスクの開始:ログオン時</li><li>設定: 任意のユーザー</li><li>有効: チェックを入れる</li></ul></li><li><p>操作タブ<br>左下の「新規」をクリックして設定画面を開き、以下のように設定。  </p><ul><li>操作: プログラムの開始</li><li>プログラム: 先ほど配置した<code>C:\bin\wsl-ssh-pageant-amd64-gui.exe</code>を入力(もしくは「参照…」をクリックして検索)</li><li>引数の追加: <code>--systray --winssh openssh-ssh-agent</code><br>※タスクトレイに常駐させたくない場合は<code>--winssh openssh-ssh-agent</code></li></ul></li></ul><h1 id="gpg-agentの設定-1"><a href="#gpg-agentの設定-1" class="headerlink" title="gpg-agentの設定"></a>gpg-agentの設定</h1><p>Kleopatlaを立ち上げ、<code>設定</code> -&gt; <code>Kleopatlaを設定</code>の順でクリックします</p><hr><p>新しいウィンドウが開くので、<br>左側の錠前のアイコン<code>GnuPGシステム</code>をクリック。<br><code>プライベート鍵</code>タブから、<code>puttyサポートを有効にする</code>のチェックを入れます。  </p><p>最後に<code>OK</code>をクリックして終了します</p><hr><p>gpg-agentの自動起動設定を行います。<br>タスクスケジューラを立ち上げ、右側のリストから<code>タスクの作成</code>をクリックします。<br>新しいタスクを次のように作成してください</p><ul><li><p>全般タブ  </p><ul><li><code>gpg-agent</code>など任意の名前を入力</li><li>「ユーザーがログインしているときのみ実行する」から変更しない</li></ul></li><li><p>トリガータブ<br>左下の「新規」をクリックして設定画面を開き、以下のように設定。  </p><ul><li>タスクの開始:ログオン時</li><li>設定: 任意のユーザー</li><li>有効: チェックを入れる</li></ul></li><li><p>操作タブ<br>左下の「新規」をクリックして設定画面を開き、以下のように設定。  </p><ul><li>操作: プログラムの開始</li><li>プログラム: <code>&quot;C:\Program Files (x86)\GnuPG\bin\gpg-connect-agent.exe&quot;</code>を入力(もしくは「参照…」をクリックして検索)</li><li>引数の追加: <code>updatestartuptty /bye</code></li></ul></li></ul><h1 id="動作確認-1"><a href="#動作確認-1" class="headerlink" title="動作確認"></a>動作確認</h1><p>ターミナル上で<code>ssh-add -L</code>を入力します。<br>このとき、Yubikeyが刺さっていれば公開鍵が表示されるはずです。<br>ここで表示した公開鍵をサーバに追加して利用してください。</p><h1 id="おまけ-Git-for-Windowsでの使い方-1"><a href="#おまけ-Git-for-Windowsでの使い方-1" class="headerlink" title="(おまけ) Git for Windowsでの使い方"></a>(おまけ) Git for Windowsでの使い方</h1><p>以下の設定を行い、CygWinから内蔵のOpenSSHにsshクライアントを切り替える。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config --global core.sshCommand &quot;C:/Windows/System32/OpenSSH/ssh.exe&quot;</span><br></pre></td></tr></table></figure><h1 id="参考文献-1"><a href="#参考文献-1" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://keens.github.io/blog/2021/03/23/yubikeywotsukau_openpghen/">YubikeyでOpenPGP鍵をセキュアに使う | κeenのHappy Hacκing Blog</a></p><p><a href="https://github.com/benpye/wsl-ssh-pageant/">benpye&#x2F;wsl-ssh-pageant: A Pageant -&gt; TCP bridge for use with WSL, allowing for Pageant to be used as an ssh-ageant within the WSL environment.</a></p><p><a href="https://qiita.com/slotport/items/e1d5a5dbd3aa7c6a2a24">混沌を極めるWindowsのssh-agent事情 #Windows - Qiita</a></p><p><a href="https://www.lisz-works.com/entry/git-windows10-openssh">GitをWindows10のOpenSSHを使うように設定する - lisz-works</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;YubikeyのOpenPGP機能を利用してSSH秘密鍵を管理したい。&lt;br&gt;その際、ssh-agenの設定が難しかったので、一番簡単だと思うやり方を紹介します。&lt;/p&gt;
&lt;p&gt;鍵の生成は以下の記事を参考にすれば特に難しくはなかったので、鍵生成が済んでいてYubikeyへの書き込みが終わっている前提で話を進めます。&lt;br&gt;&lt;a href=&quot;https://keens.github.io/blog/2021/03/23/yubikeywotsukau_openpghen/&quot;&gt;YubikeyでOpenPGP鍵をセキュアに使う | κeenのHappy Hacκing Blog&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://lunatic.red/categories/Windows/"/>
    
    <category term="設定" scheme="http://lunatic.red/categories/Windows/%E8%A8%AD%E5%AE%9A/"/>
    
    
    <category term="サーバ" scheme="http://lunatic.red/tags/%E3%82%B5%E3%83%BC%E3%83%90/"/>
    
    <category term="Windows" scheme="http://lunatic.red/tags/Windows/"/>
    
    <category term="セキュリティ" scheme="http://lunatic.red/tags/%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3/"/>
    
  </entry>
  
  <entry>
    <title>Windows11環境でパスキー(Yubikey)利用時に出る「iPhone、iPad、またはAndroidデバイス」の選択肢を消す方法</title>
    <link href="http://lunatic.red/2024/09/26/Windows11%E7%92%B0%E5%A2%83%E3%81%A7%E3%83%91%E3%82%B9%E3%82%AD%E3%83%BC-Yubikey-%E5%88%A9%E7%94%A8%E6%99%82%E3%81%AB%E5%87%BA%E3%82%8B%E3%80%8CiPhone%E3%80%81iPad%E3%80%81%E3%81%BE%E3%81%9F%E3%81%AFAndroid%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%80%8D%E3%81%AE%E9%81%B8%E6%8A%9E%E8%82%A2%E3%82%92%E6%B6%88%E3%81%99%E6%96%B9%E6%B3%95/"/>
    <id>http://lunatic.red/2024/09/26/Windows11%E7%92%B0%E5%A2%83%E3%81%A7%E3%83%91%E3%82%B9%E3%82%AD%E3%83%BC-Yubikey-%E5%88%A9%E7%94%A8%E6%99%82%E3%81%AB%E5%87%BA%E3%82%8B%E3%80%8CiPhone%E3%80%81iPad%E3%80%81%E3%81%BE%E3%81%9F%E3%81%AFAndroid%E3%83%87%E3%83%90%E3%82%A4%E3%82%B9%E3%80%8D%E3%81%AE%E9%81%B8%E6%8A%9E%E8%82%A2%E3%82%92%E6%B6%88%E3%81%99%E6%96%B9%E6%B3%95/</id>
    <published>2024-09-25T20:27:00.000Z</published>
    <updated>2025-04-26T07:45:39.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>「iPhone、iPad、またはAndroidデバイス」の選択肢が毎回1番目に表示されて邪魔すぎるので無効にします</p><span id="more"></span><h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1><p><code>田+R</code>で「ファイル名を指定して実行」を呼び出し、<code>devmgmt.msc</code>と入力して「OK」をクリック</p><hr><p>Bluetoothを無効にする。</p><hr><p>Bluetoothデバイスとの共存は無理そうなので、会議通話などで使用する方は、<br>USBオーディオに変換するタイプのアダプタを購入する必要があります。<br><a href="https://www.amazon.co.jp/dp/B0C1NBRC4L">Amazon | Creative BT-W3X PS4&#x2F;PS5&#x2F;Nintendo Switch使用可能 aptX HD 最大24bit&#x2F;48kHz USB-C接続 Bluetooth 5.3 オーディオ トランスミッター HP-BTW3X | クリエイティブ・メディア | Bluetoothアダプタ 通販</a><br>※アフィリンクなし</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://answers.microsoft.com/en-us/windows/forum/all/disable-iphone-ipad-or-android-device-option-for/3c83b399-8dfd-4d5a-9945-0a14acd58e10?page=4">Disable “iPhone, iPad, or Android device” option for Passkey Sign-in - Microsoft Community</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;「iPhone、iPad、またはAndroidデバイス」の選択肢が毎回1番目に表示されて邪魔すぎるので無効にします&lt;/p&gt;</summary>
    
    
    
    <category term="Windows" scheme="http://lunatic.red/categories/Windows/"/>
    
    <category term="設定" scheme="http://lunatic.red/categories/Windows/%E8%A8%AD%E5%AE%9A/"/>
    
    
    <category term="Windows" scheme="http://lunatic.red/tags/Windows/"/>
    
    <category term="セキュリティ" scheme="http://lunatic.red/tags/%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3/"/>
    
  </entry>
  
  <entry>
    <title>wireguardでIPv6を利用する設定(疑似 IPv6 over IPv4)</title>
    <link href="http://lunatic.red/2024/06/29/wireguard%E3%81%A7IPv6%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E8%A8%AD%E5%AE%9A-%E7%96%91%E4%BC%BC-IPv6-over-IPv4/"/>
    <id>http://lunatic.red/2024/06/29/wireguard%E3%81%A7IPv6%E3%82%92%E5%88%A9%E7%94%A8%E3%81%99%E3%82%8B%E8%A8%AD%E5%AE%9A-%E7%96%91%E4%BC%BC-IPv6-over-IPv4/</id>
    <published>2024-06-28T17:15:00.000Z</published>
    <updated>2025-04-26T07:45:39.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>WireguardでIPv6通信ができるようにします。</p><span id="more"></span><h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><p>OS: Ubuntu 22.04.4 LTS<br>プラットフォーム: OCI無料枠</p><h1 id="事前準備"><a href="#事前準備" class="headerlink" title="事前準備"></a>事前準備</h1><h2 id="ip6tablesを使えるようにする"><a href="#ip6tablesを使えるようにする" class="headerlink" title="ip6tablesを使えるようにする"></a>ip6tablesを使えるようにする</h2><p>ubuntuであればあらかじめインストールされていると思います。</p><h2 id="カーネルの設定でIPv6フォワードを有効にする"><a href="#カーネルの設定でIPv6フォワードを有効にする" class="headerlink" title="カーネルの設定でIPv6フォワードを有効にする"></a>カーネルの設定でIPv6フォワードを有効にする</h2><p><code>/etc/sysctl.conf</code>を任意のテキストエディタで開き、ファイルの末尾に以下の設定を追加します</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">net.ipv4.ip_forward</span>=<span class="number">1</span></span><br><span class="line"><span class="attr">net.ipv6.conf.all.forwarding</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure><hr><p>その後端末を再起動します</p><h1 id="設定"><a href="#設定" class="headerlink" title="設定"></a>設定</h1><p>まずはIPv6のULAアドレス(ローカルIP)を生成します。<br><a href="https://www.unique-local-ipv6.com/">Unique Local IPv6 Generator</a><br>※fd00::&#x2F;8を使ってもよいですが、推奨されていないようです。</p><hr><p>次にwireguardのコンフィグを投入します。</p><p>IPv4のローカルIPを<code>172.24.255.0/24</code><br>先ほど生成したIPv6のULAを<code>fdac:756c:6733::/48</code><br>とすると以下の通りです</p><h2 id="サーバー"><a href="#サーバー" class="headerlink" title="サーバー"></a>サーバー</h2><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Interface]</span></span><br><span class="line"><span class="attr">PrivateKey</span> = ****</span><br><span class="line"><span class="attr">Address</span> = <span class="number">172.24</span>.<span class="number">255.1</span>/<span class="number">24</span>, fdac:<span class="number">756</span>c:<span class="number">6733</span>::<span class="number">1</span>/<span class="number">48</span></span><br><span class="line"><span class="attr">ListenPort</span> = <span class="number">51820</span></span><br><span class="line"><span class="attr">SaveConfig</span> = <span class="literal">false</span></span><br><span class="line"><span class="attr">MTU</span> = <span class="number">1374</span> <span class="comment"># これぐらいにすると通信が安定する</span></span><br><span class="line"><span class="attr">PostUp</span> = iptables -A FORWARD -i wg0 -j ACCEPT<span class="comment">; iptables -t nat -A POSTROUTING -o ens3 -j MASQUERADE; ip6tables -A FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -A POSTROUTING -o ens3 -j MASQUERADE</span></span><br><span class="line"><span class="attr">PostDown</span> = iptables -D FORWARD -i wg0 -j ACCEPT<span class="comment">; iptables -t nat -D POSTROUTING -o ens3 -j MASQUERADE;ip6tables -D FORWARD -i wg0 -j ACCEPT; ip6tables -t nat -D POSTROUTING -o ens3 -j MASQUERADE</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Peer]</span></span><br><span class="line"><span class="attr">PublicKey</span> = ***</span><br><span class="line"><span class="attr">AllowedIPs</span> = <span class="number">172.24</span>.<span class="number">255.2</span>/<span class="number">32</span>, fdac:<span class="number">756</span>c:<span class="number">6733</span>::<span class="number">2</span>/<span class="number">128</span></span><br></pre></td></tr></table></figure><h2 id="クライアント"><a href="#クライアント" class="headerlink" title="クライアント"></a>クライアント</h2><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Interface]</span></span><br><span class="line"><span class="attr">PrivateKey</span> = ***</span><br><span class="line"><span class="attr">Address</span> = <span class="number">172.24</span>.<span class="number">255.2</span>/<span class="number">32</span>, fdac:<span class="number">756</span>c:<span class="number">6733</span>::<span class="number">2</span>/<span class="number">128</span></span><br><span class="line"><span class="attr">DNS</span> = <span class="number">2606</span>:<span class="number">4700</span>:<span class="number">4700</span>::<span class="number">1111</span>, <span class="number">2606</span>:<span class="number">4700</span>:<span class="number">4700</span>::<span class="number">1001</span>, <span class="number">1.1</span>.<span class="number">1.1</span>, <span class="number">1.0</span>.<span class="number">0.1</span></span><br><span class="line"><span class="attr">MTU</span> = <span class="number">1374</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Peer]</span></span><br><span class="line"><span class="attr">PublicKey</span> = ***</span><br><span class="line"><span class="attr">AllowedIPs</span> = <span class="number">0.0</span>.<span class="number">0.0</span>/<span class="number">0</span>, ::/<span class="number">0</span></span><br><span class="line"><span class="attr">Endpoint</span> = <span class="number">203.0</span>.<span class="number">113.55</span>:<span class="number">51820</span></span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://ja.linux-console.net/?p=9584">Linux で IP 転送を有効にする方法</a><br><a href="https://chat.openai.com/">Chat GPT</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;WireguardでIPv6通信ができるようにします。&lt;/p&gt;</summary>
    
    
    
    <category term="サーバ" scheme="http://lunatic.red/categories/%E3%82%B5%E3%83%BC%E3%83%90/"/>
    
    <category term="ネットワーク" scheme="http://lunatic.red/categories/%E3%82%B5%E3%83%BC%E3%83%90/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"/>
    
    
    <category term="サーバ" scheme="http://lunatic.red/tags/%E3%82%B5%E3%83%BC%E3%83%90/"/>
    
    <category term="ネットワーク" scheme="http://lunatic.red/tags/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"/>
    
  </entry>
  
  <entry>
    <title>certbotとngixの競合でnginxが勝手に落ちる不具合の解消</title>
    <link href="http://lunatic.red/2024/04/25/certbot%E3%81%A8ngix%E3%81%AE%E7%AB%B6%E5%90%88%E3%81%A7nginx%E3%81%8C%E5%8B%9D%E6%89%8B%E3%81%AB%E8%90%BD%E3%81%A1%E3%82%8B%E4%B8%8D%E5%85%B7%E5%90%88%E3%81%AE%E8%A7%A3%E6%B6%88/"/>
    <id>http://lunatic.red/2024/04/25/certbot%E3%81%A8ngix%E3%81%AE%E7%AB%B6%E5%90%88%E3%81%A7nginx%E3%81%8C%E5%8B%9D%E6%89%8B%E3%81%AB%E8%90%BD%E3%81%A1%E3%82%8B%E4%B8%8D%E5%85%B7%E5%90%88%E3%81%AE%E8%A7%A3%E6%B6%88/</id>
    <published>2024-04-24T17:46:00.000Z</published>
    <updated>2025-04-26T07:45:39.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>・certbotがnginxを殺してた<br>・設定ミスがありcertbotが更新にコケていた<br>・crontabを使用していたが、更新用のdaemonが裏で動いていて、予期せぬ時刻に障害が発生した</p><span id="more"></span><h1 id="事の発端"><a href="#事の発端" class="headerlink" title="事の発端"></a>事の発端</h1><p>ある日、自宅のサーバで運用しているWebページが落ちていることに気がつき、  その理由を探ったところ、SSLアクセラレータとして使っているnginxのサービスが停止しているようだった。</p><p>落ちてから1時間ぐらいすると生き返ると言う状況から当初はリソース不足かと思い、VMのメモリ割り当てを4GBまで増やして再起動したところ正常に復旧した。</p><p>しかし、翌日またnginxが落ちておりヤケクソでvCPUを8コア&#x2F;メモリ割り当てを64GBにしたが、nginxは落ちてしまった。</p><h1 id="原因究明"><a href="#原因究明" class="headerlink" title="原因究明"></a>原因究明</h1><p><code>/var/log/messages/</code>　を見たら速攻で分かった。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Apr 24 10:22:23 *hostname* systemd[1]: Starting This service automatically renews any certbot certificates found...</span><br><span class="line">Apr 24 10:22:24 *hostname* certbot[99744]: Saving debug log to /var/log/letsencrypt/letsencrypt.log</span><br><span class="line">Apr 24 10:22:24 *hostname* certbot[99744]: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Apr 24 10:22:24 *hostname* certbot[99744]: Processing /etc/letsencrypt/renewal/*****.conf</span><br><span class="line">Apr 24 10:22:24 *hostname* certbot[99744]: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Apr 24 10:22:25 *hostname* certbot[99744]: Certificate not yet due for renewal</span><br><span class="line">Apr 24 10:22:25 *hostname* certbot[99744]: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Apr 24 10:22:25 *hostname* certbot[99744]: Processing /etc/letsencrypt/renewal/*****.conf</span><br><span class="line">Apr 24 10:22:25 *hostname* certbot[99744]: - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -</span><br><span class="line">Apr 24 10:22:27 *hostname* systemd[1]: Stopping The nginx HTTP and reverse proxy server...</span><br><span class="line">Apr 24 10:22:27 *hostname* systemd[1]: nginx.service: Deactivated successfully.</span><br><span class="line">Apr 24 10:22:27 *hostname* systemd[1]: Stopped The nginx HTTP and reverse proxy server.</span><br><span class="line">Apr 24 10:22:27 *hostname* systemd[1]: nginx.service: Consumed 26.757s CPU time.</span><br><span class="line">Apr 24 10:22:27 *hostname* certbot[99744]: Renewing an existing certificate for *****</span><br></pre></td></tr></table></figure><p>certbotが証明書を更新する際にnginxが落とされていた。<br>しかも悪いことに証明書の更新にコケて固まっていた模様。(しばらくするとタイムアウトになってnginxが甦生される)</p><h2 id="証明書の更新にコケた理由"><a href="#証明書の更新にコケた理由" class="headerlink" title="証明書の更新にコケた理由"></a>証明書の更新にコケた理由</h2><p>certbotが延々と遅延していた理由としては、firewalldの設定が間違っていて80番ポートが塞がっていたのでACMEチャレンジで延々と待たされていただけのようであった。</p><h2 id="予期せぬタイミングで動作したcertbot"><a href="#予期せぬタイミングで動作したcertbot" class="headerlink" title="予期せぬタイミングで動作したcertbot"></a>予期せぬタイミングで動作したcertbot</h2><p>自分の場合、certbotは毎月1日の午前3時に動かすようcrontabを組んでいたが何故か4&#x2F;24にも障害が発生。<br>こちらも気になったので調査してみた。</p><p>その結果、<code>certbot-renew.timer</code>というサービスが存在している事が判明。</p><h1 id="対策"><a href="#対策" class="headerlink" title="対策"></a>対策</h1><h2 id="firewalldの設定変更"><a href="#firewalldの設定変更" class="headerlink" title="firewalldの設定変更"></a>firewalldの設定変更</h2><p>以下のコマンドで80番を穴開け</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=dmz --add-service=http</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure><h2 id="crontabからcertbot-renew-timerへの切り替え"><a href="#crontabからcertbot-renew-timerへの切り替え" class="headerlink" title="crontabからcertbot-renew.timerへの切り替え"></a>crontabから<code>certbot-renew.timer</code>への切り替え</h2><p>今回は何故かcrontabの方にしか設定していない<code>pre-hook</code>と<code>post-hook</code>が動いていたようだが、この際なのできちんと設定を行っておく</p><p><code>/etc/sysconfig/certbot</code> ファイルをお好みのエディタで開いて<code>PRE_HOOK</code>と<code>POST_HOOK</code>の行を以下の通り書き換えればOK</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PRE_HOOK=&quot;--pre-hook &#x27;systemctl stop nginx&#x27;&quot;</span><br><span class="line">POST_HOOK=&quot;--post-hook &#x27;systemctl restart nginx&#x27;&quot;</span><br></pre></td></tr></table></figure><p>最後に<code>certbot-renew.timer</code>を再起動しておく</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart certbot-renew.timer</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://tackweb.net/index.php/2020/09/21/auto_renew_ssl/">【簡単】Let’s Encryptの自動更新をcronなしで実現しよう | TACK-WEB</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;・certbotがnginxを殺してた&lt;br&gt;・設定ミスがありcertbotが更新にコケていた&lt;br&gt;・crontabを使用していたが、更新用のdaemonが裏で動いていて、予期せぬ時刻に障害が発生した&lt;/p&gt;</summary>
    
    
    
    <category term="サーバ" scheme="http://lunatic.red/categories/%E3%82%B5%E3%83%BC%E3%83%90/"/>
    
    <category term="障害復旧" scheme="http://lunatic.red/categories/%E3%82%B5%E3%83%BC%E3%83%90/%E9%9A%9C%E5%AE%B3%E5%BE%A9%E6%97%A7/"/>
    
    
    <category term="サーバ" scheme="http://lunatic.red/tags/%E3%82%B5%E3%83%BC%E3%83%90/"/>
    
    <category term="nginx" scheme="http://lunatic.red/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>OpensslでEC(楕円曲線)のクライアント証明書を作成する</title>
    <link href="http://lunatic.red/2024/03/22/Openssl%E3%81%A7EC-%E6%A5%95%E5%86%86%E6%9B%B2%E7%B7%9A-%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/"/>
    <id>http://lunatic.red/2024/03/22/Openssl%E3%81%A7EC-%E6%A5%95%E5%86%86%E6%9B%B2%E7%B7%9A-%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%A4%E3%82%A2%E3%83%B3%E3%83%88%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B/</id>
    <published>2024-03-22T09:05:00.000Z</published>
    <updated>2025-04-26T07:45:39.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>Opensslでクライアント証明書を作成する方法はよく紹介されているが<br>ほとんどがRSA暗号を用いた物だったため、EC(楕円曲線)暗号を用いたクライアント証明書の作成方法を調べました。</p><p>おまけとしてnginxで利用する際の設定も紹介します</p><span id="more"></span><h1 id="CA証明書の生成"><a href="#CA証明書の生成" class="headerlink" title="CA証明書の生成"></a>CA証明書の生成</h1><p>CAとは証明書を発行する機関の事です。<br>PKIはクライアントがCAを信頼しそのCAが発行した証明書を許可するという仕組みのため、オレオレ証明書でもCAの作成が必要です。</p><h2 id="設定ファイルの記述"><a href="#設定ファイルの記述" class="headerlink" title="設定ファイルの記述"></a>設定ファイルの記述</h2><p><code>CA.txt</code>というファイル名でファイルを作成し、以下の内容をコピペします。<br>これは参考文献(1)からそのまま持ってきました。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">subjectKeyIdentifier</span>=hash</span><br><span class="line"><span class="attr">authorityKeyIdentifier</span>=keyid:always,issuer:always</span><br><span class="line"><span class="attr">basicConstraints</span>=CA:<span class="literal">TRUE</span></span><br><span class="line"><span class="attr">keyUsage</span>=keyCertSign,cRLSign</span><br></pre></td></tr></table></figure><h2 id="証明書の生成"><a href="#証明書の生成" class="headerlink" title="証明書の生成"></a>証明書の生成</h2><p>以下のコマンドを実行します。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> openssl ecparam -name secp384r1 -genkey -noout -out CA.key</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> openssl req -new -key CA.key -out CA.csr -subj <span class="string">&quot;/CN=Selfsign Root CA&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> openssl x509 -req -days 3650 -<span class="keyword">in</span> CA.csr -signkey CA.key -extfile CA.txt -out CA.crt</span></span><br></pre></td></tr></table></figure><p>これで以下の通りファイルが生成されます</p><table><thead><tr><th>ファイル名</th><th>用途</th></tr></thead><tbody><tr><td>CA.key</td><td>CAの秘密鍵</td></tr><tr><td>CA.csr</td><td>CAの証明書発行要求</td></tr><tr><td>CA.crt</td><td>CAの証明書</td></tr></tbody></table><h1 id="クライアント証明書の発行"><a href="#クライアント証明書の発行" class="headerlink" title="クライアント証明書の発行"></a>クライアント証明書の発行</h1><p>続いて、実際に使用するクライアント証明書を作成します。</p><h2 id="設定ファイルの記述-1"><a href="#設定ファイルの記述-1" class="headerlink" title="設定ファイルの記述"></a>設定ファイルの記述</h2><p><code>Client.txt</code>というファイル名でファイルを作成し、以下の内容をコピペします。<br>これは参考文献(1)からそのまま持ってきました。</p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">basicConstraints</span>=CA:<span class="literal">FALSE</span></span><br><span class="line"><span class="attr">subjectKeyIdentifier</span>=hash</span><br><span class="line"><span class="attr">authorityKeyIdentifier</span>=keyid,issuer:always</span><br><span class="line"><span class="attr">extendedKeyUsage</span>=clientAuth</span><br><span class="line"><span class="attr">keyUsage</span>=digitalSignature</span><br></pre></td></tr></table></figure><h2 id="クライアント証明書の生成"><a href="#クライアント証明書の生成" class="headerlink" title="クライアント証明書の生成"></a>クライアント証明書の生成</h2><p>以下のコマンドを実行します。 </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> openssl ecparam -name secp384r1 -genkey -noout -out Client.key</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> openssl req -new -key Client.key -out Client.csr -subj <span class="string">&quot;/CN=Client&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> openssl x509 -req -<span class="keyword">in</span> Client.csr -CA CA.crt -CAkey CA.key -CAcreateserial -days 3650 -extfile Client.txt -out Client.crt</span></span><br></pre></td></tr></table></figure><p>これで以下の通りファイルが生成されます</p><table><thead><tr><th>ファイル名</th><th>用途</th></tr></thead><tbody><tr><td>Client.key</td><td>クライアントの秘密鍵</td></tr><tr><td>Client.csr</td><td>クライアントの証明書発行要求</td></tr><tr><td>Client.crt</td><td>クライアントの証明書</td></tr></tbody></table><h1 id="Nginxへの設定方法-おまけ"><a href="#Nginxへの設定方法-おまけ" class="headerlink" title="Nginxへの設定方法(おまけ)"></a>Nginxへの設定方法(おまけ)</h1><p><code>ssl_certificate</code>とかの設定が書いてある所に書いてください。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">ssl_client_certificate</span> <span class="string">&quot;&lt;CA.crtのファイルパス&gt;&quot;</span>;</span><br><span class="line"><span class="attribute">ssl_verify_client</span> <span class="literal">on</span>;</span><br></pre></td></tr></table></figure><h1 id="WindowsやAndroidに証明書をインポートする方法"><a href="#WindowsやAndroidに証明書をインポートする方法" class="headerlink" title="WindowsやAndroidに証明書をインポートする方法"></a>WindowsやAndroidに証明書をインポートする方法</h1><p>PKCS12形式に変換します。<br>※ここで<code>-legacy</code>オプションをつけないとAndroidにインポートできない</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> openssl pkcs12 -<span class="built_in">export</span> -legacy -<span class="keyword">in</span> Client.crt -inkey Client.key -certfile CA.crt -out Client.pfx</span></span><br></pre></td></tr></table></figure><p>これでWindows&#x2F;Androidで扱える形式になりました。<br><code>Client.pfx</code>をコピーして、利用してください。</p><hr><p>Windowsの場合は、ダブルクリックするとウィザードが立ち上がるので指示に従ってインストールしてください。<br>主要なブラウザからはこれだけで使えるようになります。</p><hr><p>Androidの場合は以下の通り設定画面を開く<br>設定 -&gt; セキュリティ -&gt; セキュリティの詳細設定 -&gt; 暗号化と認証情報 -&gt; 証明書のインストール -&gt; VPNとアプリユーザー証明書</p><p>ファイルピッカーが表示されたら<code>Client.pfx</code>をタップして開く</p><p>パスワードの入力を求められたら、変換時に入力したパスワードを入力する。</p><p>Androidでオレオレクライアント証明書を扱えるブラウザは(自分が試した限りでは)Operaだけでした。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://qiita.com/nobrin/items/ec5dba787637fabfd79e">(1) 自己署名CAをOpenSSLコマンドラインオプションで使う #OpenSSL - Qiita</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;Opensslでクライアント証明書を作成する方法はよく紹介されているが&lt;br&gt;ほとんどがRSA暗号を用いた物だったため、EC(楕円曲線)暗号を用いたクライアント証明書の作成方法を調べました。&lt;/p&gt;
&lt;p&gt;おまけとしてnginxで利用する際の設定も紹介します&lt;/p&gt;</summary>
    
    
    
    <category term="サーバ" scheme="http://lunatic.red/categories/%E3%82%B5%E3%83%BC%E3%83%90/"/>
    
    <category term="セキュリティ" scheme="http://lunatic.red/categories/%E3%82%B5%E3%83%BC%E3%83%90/%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3/"/>
    
    
    <category term="セキュリティ" scheme="http://lunatic.red/tags/%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3/"/>
    
  </entry>
  
  <entry>
    <title>Knot-ResolverでAndroid向けの広告をブロック</title>
    <link href="http://lunatic.red/2024/03/10/Knot-Resolver%E3%81%A7Android%E5%90%91%E3%81%91%E3%81%AE%E5%BA%83%E5%91%8A%E3%82%92%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF/"/>
    <id>http://lunatic.red/2024/03/10/Knot-Resolver%E3%81%A7Android%E5%90%91%E3%81%91%E3%81%AE%E5%BA%83%E5%91%8A%E3%82%92%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF/</id>
    <published>2024-03-09T22:24:00.000Z</published>
    <updated>2025-04-26T07:45:39.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p>Knot-Resolverを使い、Androidの「プライベートDNS設定」で利用できるDoTサーバーを構築します<br>また、RPZゾーンの機能を利用し広告ブロックも行います  </p><p>DoTを利用するには何でもいいのでドメインが必要になります。<br>ドメインを持っていない人は<a href="http://www.mydns.jp/">MyDNS</a>など、無料の物を利用してもかまいません。</p><span id="more"></span><h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/redhat-release</span></span><br><span class="line">Red Hat Enterprise Linux release 9.3 (Plow)</span><br></pre></td></tr></table></figure><h1 id="EPELを有効にする"><a href="#EPELを有効にする" class="headerlink" title="EPELを有効にする"></a>EPELを有効にする</h1><p>今回はRHELを使用しているので、Subscription ManagerからEPELを有効にしていきます</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> subscription-manager repos --<span class="built_in">enable</span> codeready-builder-for-rhel-9-$(<span class="built_in">arch</span>)-rpms</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf install https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm</span></span><br></pre></td></tr></table></figure><h1 id="knot-resolverをインストールする"><a href="#knot-resolverをインストールする" class="headerlink" title="knot-resolverをインストールする"></a>knot-resolverをインストールする</h1><p>knot-resolverはdnfからすんなりインストールできます</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> dnf install knot-resolver</span></span><br></pre></td></tr></table></figure><h1 id="RPZゾーンファイルを用意する"><a href="#RPZゾーンファイルを用意する" class="headerlink" title="RPZゾーンファイルを用意する"></a>RPZゾーンファイルを用意する</h1><p><a href="https://github.com/p7cq/dns-bl">dns-bl</a>というRPZを自動生成するスクリプトを利用します。<br>かなり古いですが、正常動作を確認しています。</p><h2 id="dns-blのインストール"><a href="#dns-blのインストール" class="headerlink" title="dns-blのインストール"></a>dns-blのインストール</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> /opt/</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> https://github.com/p7cq/dns-bl.git</span></span><br></pre></td></tr></table></figure><h2 id="configファイルの編集"><a href="#configファイルの編集" class="headerlink" title="configファイルの編集"></a>configファイルの編集</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> vim /opt/dns-bl/conf/dns-bl.ini</span> </span><br></pre></td></tr></table></figure><p>複数の広告除去用hostsファイルやマルウェア配布URLリストを指定したコンフィグを例示します。<br>コピペで上書きしてください  </p><figure class="highlight toml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[global]</span></span><br><span class="line"><span class="attr">rpz_file</span> = /etc/knot-resolver/rpz.zone</span><br><span class="line"><span class="attr">redirect</span> = IN CNAME .</span><br><span class="line"><span class="comment"># whitelisted domains</span></span><br><span class="line"><span class="attr">whitelist_file_prefix</span> = whitelist_</span><br><span class="line"></span><br><span class="line"><span class="section">[source/1]</span></span><br><span class="line"><span class="attr">url</span> = https://urlhaus.abuse.ch/downloads/hostfile/</span><br><span class="line"><span class="attr">file_type</span> = text</span><br><span class="line"><span class="attr">categories</span> = malware</span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="section">[source/2]</span></span><br><span class="line"><span class="attr">url</span> = https://raw.githubusercontent.com/blocklistproject/Lists/master/alt-version/ads-nl.txt</span><br><span class="line"><span class="attr">file_type</span> = text</span><br><span class="line"><span class="attr">categories</span> = ads</span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="section">[source/3]</span></span><br><span class="line"><span class="attr">url</span> = https://logroid.github.io/adaway-hosts/hosts.txt</span><br><span class="line"><span class="attr">file_type</span> = text</span><br><span class="line"><span class="attr">categories</span> = ads</span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="section">[source/4]</span></span><br><span class="line"><span class="attr">url</span> = https://adaway.org/hosts.txt</span><br><span class="line"><span class="attr">file_type</span> = text</span><br><span class="line"><span class="attr">categories</span> = ads</span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="section">[source/5]</span></span><br><span class="line"><span class="attr">url</span> = https://warui.intaa.net/adhosts/hosts_lb.txt</span><br><span class="line"><span class="attr">file_type</span> = text</span><br><span class="line"><span class="attr">categories</span> = ads</span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="section">[source/6]</span></span><br><span class="line"><span class="attr">url</span> = https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts</span><br><span class="line"><span class="attr">file_type</span> = text</span><br><span class="line"><span class="attr">categories</span> = ads</span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">yes</span></span><br><span class="line"></span><br><span class="line"><span class="section">[source/7]</span></span><br><span class="line"><span class="attr">url</span> = https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&amp;showintro=<span class="number">0</span>&amp;mimetype=plaintext</span><br><span class="line"><span class="attr">file_type</span> = text</span><br><span class="line"><span class="attr">categories</span> = ads</span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">yes</span></span><br></pre></td></tr></table></figure><h2 id="自動更新スクリプトの作成"><a href="#自動更新スクリプトの作成" class="headerlink" title="自動更新スクリプトの作成"></a>自動更新スクリプトの作成</h2><p>dns-blを定期的に実行してrpzファイルを更新するスクリプトを作成します。<br>本記事ではこのスクリプトを<code>/root/scripts/rpz_update.sh</code>という名前で保存しています。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> su</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">vim /root/scripts/rpz_update.sh</span></span><br></pre></td></tr></table></figure><p>以下のシェルスクリプトをコピペで上書きしてください。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">/opt/dns-bl/bin/run.sh</span><br><span class="line"><span class="built_in">chown</span> knot-resolver:knot-resolver /etc/knot-resolver/rpz.zone</span><br><span class="line">restorecon -FR /etc/knot-resolver/</span><br><span class="line">systemctl restart kresd@*</span><br></pre></td></tr></table></figure><p>その後、実行権限を付与してください</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">chmod</span> +x /root/scripts/rpz_update.sh</span></span><br></pre></td></tr></table></figure><h2 id="Cron設定"><a href="#Cron設定" class="headerlink" title="Cron設定"></a>Cron設定</h2><p>cronに上記スクリプトを登録します</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">sudo</span> crontab -e</span></span><br></pre></td></tr></table></figure><p>テキストエディタが開いたら以下のように入力してください(毎日00:00に更新)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0 0 * * * /bin/bash /root/scripts/rpz_update.sh</span><br></pre></td></tr></table></figure><h1 id="ZeroSSLで証明書を取得する"><a href="#ZeroSSLで証明書を取得する" class="headerlink" title="ZeroSSLで証明書を取得する"></a>ZeroSSLで証明書を取得する</h1><p>ZeroSSLからTLSサーバ証明書を取得します。<br>※LetsEncryptを使用するとAndroidの一部のバージョンでは正常に利用できません   </p><p>以下の記事を参考に証明書ファイルをダウンロードしてください。<br><a href="https://dev.classmethod.jp/articles/zerossl-a-free-and-easy-way-to-issue-certificates-from-your-browser/">ブラウザから無料で簡単に証明書を発行できる ZeroSSL | DevelopersIO</a></p><p>その後、取得した証明書はサーバの<code>/etc/knot-resolver/</code>に保存します。</p><p>この記事では秘密鍵を<code>privkey.pem</code>証明書を<code>fullchain.pem</code>という名前で保存しています。<br>別の名前で保存した場合は設定ファイルの1行目を書き換えてください。</p><h1 id="knot-resolverの設定"><a href="#knot-resolverの設定" class="headerlink" title="knot-resolverの設定"></a>knot-resolverの設定</h1><p>Configを編集します</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> vim /etc/knot-resolver/kresd.conf</span></span><br></pre></td></tr></table></figure><p>以下のconfigをコピペで上書きしてください</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">net.tls(<span class="string">&quot;/etc/knot-resolver/fullchain.pem&quot;</span>,<span class="string">&quot;/etc/knot-resolver/privkey.pem&quot;</span>)</span><br><span class="line">net.listen(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">53</span>, &#123; kind = <span class="string">&#x27;dns&#x27;</span> &#125;)</span><br><span class="line">net.listen(<span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="number">853</span>, &#123; kind = <span class="string">&#x27;tls&#x27;</span> &#125;)</span><br><span class="line">modules = &#123;</span><br><span class="line">        <span class="string">&#x27;hints &gt; iterate&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;stats&#x27;</span>, </span><br><span class="line">        <span class="string">&#x27;predict&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;view&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">view:addr(<span class="string">&#x27;192.168.0.0/16&#x27;</span>,policy.all(policy.PASS))</span><br><span class="line">view:addr(<span class="string">&#x27;172.16.0.0/12&#x27;</span>,policy.all(policy.PASS))</span><br><span class="line">view:addr(<span class="string">&#x27;10.0.0.0/8&#x27;</span>,policy.all(policy.PASS))</span><br><span class="line">view:addr(<span class="string">&#x27;0.0.0.0/0&#x27;</span>,policy.all(policy.TC))</span><br><span class="line">policy.add(policy.rpz(policy.DENY, <span class="string">&#x27;/etc/knot-resolver/rpz.zone&#x27;</span>))</span><br><span class="line">log_level(<span class="string">&#x27;warning&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="kresdを起動"><a href="#kresdを起動" class="headerlink" title="kresdを起動"></a>kresdを起動</h1><p>はじめに自動更新スクリプトを手動で実行し、RPZファイルを事前生成しておきます<br>実行に成功すると生成されたゾーンファイルの行数か何かが出力されます。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> su</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">/root/scripts/rpz_update.sh</span></span><br><span class="line">346934</span><br></pre></td></tr></table></figure><p>kresdを起動します</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> systemctl <span class="built_in">enable</span> kresd@1</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> systemctl start kresd@1</span></span><br></pre></td></tr></table></figure><h1 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\admin&gt;nslookup google.com &lt;サーバIP&gt;</span><br><span class="line">サーバー:  UnKnown</span><br><span class="line">Address:  &lt;サーバIP&gt;</span><br><span class="line"></span><br><span class="line">権限のない回答:</span><br><span class="line">名前:    google.com</span><br><span class="line">Addresses:  2404:6800:4004:823::200e</span><br><span class="line">          142.250.199.110</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">C:\Users\admin&gt;nslookup ads.google.com &lt;サーバIP&gt;</span><br><span class="line">サーバー:  UnKnown</span><br><span class="line">Address:  &lt;サーバIP&gt;</span><br><span class="line"></span><br><span class="line">*** UnKnown が ads.google.com を見つけられません: Non-existent domain</span><br></pre></td></tr></table></figure><h1 id="参考資料"><a href="#参考資料" class="headerlink" title="参考資料"></a>参考資料</h1><p><a href="https://www.redhat.com/sysadmin/install-epel-linux">How to install EPEL on RHEL and CentOS Stream | Enable Sysadmin</a><br><a href="https://dev.classmethod.jp/articles/zerossl-a-free-and-easy-way-to-issue-certificates-from-your-browser/">ブラウザから無料で簡単に証明書を発行できる ZeroSSL | DevelopersIO</a><br><a href="https://knot-resolver.readthedocs.io/en/stable/config-overview.html">Configuration Overview — Knot Resolver 5.7.1 documentation</a></p>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;Knot-Resolverを使い、Androidの「プライベートDNS設定」で利用できるDoTサーバーを構築します&lt;br&gt;また、RPZゾーンの機能を利用し広告ブロックも行います  &lt;/p&gt;
&lt;p&gt;DoTを利用するには何でもいいのでドメインが必要になります。&lt;br&gt;ドメインを持っていない人は&lt;a href=&quot;http://www.mydns.jp/&quot;&gt;MyDNS&lt;/a&gt;など、無料の物を利用してもかまいません。&lt;/p&gt;</summary>
    
    
    
    <category term="サーバ" scheme="http://lunatic.red/categories/%E3%82%B5%E3%83%BC%E3%83%90/"/>
    
    <category term="ネットワーク" scheme="http://lunatic.red/categories/%E3%82%B5%E3%83%BC%E3%83%90/%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF/"/>
    
    
    <category term="サーバ" scheme="http://lunatic.red/tags/%E3%82%B5%E3%83%BC%E3%83%90/"/>
    
    <category term="広告ブロック" scheme="http://lunatic.red/tags/%E5%BA%83%E5%91%8A%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF/"/>
    
  </entry>
  
  <entry>
    <title>InvidiousインスタンスをPodman上に建てる</title>
    <link href="http://lunatic.red/2024/03/10/Invidious%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%92Podman%E4%B8%8A%E3%81%AB%E5%BB%BA%E3%81%A6%E3%82%8B/"/>
    <id>http://lunatic.red/2024/03/10/Invidious%E3%82%A4%E3%83%B3%E3%82%B9%E3%82%BF%E3%83%B3%E3%82%B9%E3%82%92Podman%E4%B8%8A%E3%81%AB%E5%BB%BA%E3%81%A6%E3%82%8B/</id>
    <published>2024-03-09T18:32:00.000Z</published>
    <updated>2025-04-26T07:45:39.410Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概要"><a href="#概要" class="headerlink" title="概要"></a>概要</h1><p><a href="https://invidious.io/">Invidious</a> というYoutubeのフロントエンドをRHEL 9.3で動かしてみたメモです。<br>RHELにはDockerの代わりにPodmanが採用されているのでPodman上でコンテナを走らせてみます。</p><span id="more"></span><h1 id="環境"><a href="#環境" class="headerlink" title="環境"></a>環境</h1><p>以下のコマンド実行結果を参照</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/redhat-release</span></span><br><span class="line">Red Hat Enterprise Linux release 9.3 (Plow)</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">podman -v</span></span><br><span class="line">podman version 4.6.1</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">whoami</span></span></span><br><span class="line">invidious</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">pwd</span></span></span><br><span class="line">/home/invidious</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">ls</span></span></span><br><span class="line">invidious  invidious_podman.yml  postgres</span><br></pre></td></tr></table></figure><h1 id="Invidiousのリポジトリをクローン"><a href="#Invidiousのリポジトリをクローン" class="headerlink" title="Invidiousのリポジトリをクローン"></a>Invidiousのリポジトリをクローン</h1><p>はじめにInvidiousのリポジトリを適当なディレクトリにクローンします。<br>この記事では<code>/home/invidious/</code>ディレクトリにクローンします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> https://github.com/iv-org/invidious.git</span></span><br></pre></td></tr></table></figure><h1 id="postgresqlのデータ保存先の作成"><a href="#postgresqlのデータ保存先の作成" class="headerlink" title="postgresqlのデータ保存先の作成"></a>postgresqlのデータ保存先の作成</h1><p>この記事では<code>/home/invidious/postgres</code>とします。<br>まずはフォルダを作ります</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">pwd</span></span> </span><br><span class="line">/home/invidious/</span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">mkdir</span> postgres</span></span><br></pre></td></tr></table></figure><p>権限とSELinuxコンテキストをつけてコンテナから参照できるようにします。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> semanage fcontext -a -t container_file_t <span class="string">&quot;/home/invidious/postgres(/.*)?&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">chmod</span> 777 <span class="string">&quot;/home/invidious/postgres&quot;</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> restorecon -FR /home/invidious/</span></span><br></pre></td></tr></table></figure><h1 id="KubernetesのPod構成ファイルを作成"><a href="#KubernetesのPod構成ファイルを作成" class="headerlink" title="KubernetesのPod構成ファイルを作成"></a>KubernetesのPod構成ファイルを作成</h1><p><a href="https://gist.github.com/fuchse-ohren/58ace0b5da794a69d9ba70b94cd835d8">このymlファイル</a>を保存して編集する。<br>編集箇所は以下の通り</p><ol><li>11行目 - postgresqlのデータ保存先ディレクトリを指定</li><li>15行目、19行目 - <code>/home/invidious/invidious</code> を自分がリポジトリをクローンしたパスに書き換え</li><li>40行目 - HMACキーを乱数に変更</li></ol><p>40行目の乱数については以下のコマンドで質の良い乱数を得られます<br>※この記事からコピペせず自分の環境で実行した物をコピペしてください</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">head</span> /dev/urandom | <span class="built_in">sha256sum</span></span></span><br><span class="line">9785539ca38e85d41af29064802e93c541549f8e1a93fd6adedb45fed244602d  -</span><br></pre></td></tr></table></figure><h1 id="実行"><a href="#実行" class="headerlink" title="実行"></a>実行</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> podman kube play invidious_podman.yml</span></span><br><span class="line"></span><br><span class="line">Trying to pull quay.io/invidious/invidious:latest...</span><br><span class="line">Getting image source signatures</span><br><span class="line">Copying blob 82fa84ecc937 done</span><br><span class="line">Copying blob 5663860407a6 done</span><br><span class="line">Copying blob 4deca27c4269 done</span><br><span class="line">Copying blob 88aba340a58e done</span><br><span class="line">Copying blob 619be1103602 skipped: already exists</span><br><span class="line">Copying blob f5799a41fb4b done</span><br><span class="line">Copying blob 028fa9dd7876 done</span><br><span class="line">Copying blob f16baffbff6d done</span><br><span class="line">Copying blob 64b04972d66a done</span><br><span class="line">Copying blob 398066e4a327 done</span><br><span class="line">Copying blob fe91b20bd915 done</span><br><span class="line">Copying blob 4f4fb700ef54 skipped: already exists</span><br><span class="line">Copying config f59a293603 done</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Trying to pull docker.io/library/postgres:14...</span><br><span class="line">Getting image source signatures</span><br><span class="line">Copying blob c8b33fe17167 skipped: already exists</span><br><span class="line">Copying blob aaed90dbec0c skipped: already exists</span><br><span class="line">Copying blob e1caac4eb9d2 skipped: already exists</span><br><span class="line">Copying blob 9a16433c9ffb skipped: already exists</span><br><span class="line">Copying blob ab2fbdc548a0 skipped: already exists</span><br><span class="line">Copying blob d5dfacd95d04 skipped: already exists</span><br><span class="line">Copying blob 5c2653ccff30 skipped: already exists</span><br><span class="line">Copying blob 8e5372f9ff7e skipped: already exists</span><br><span class="line">Copying blob 927d619c5510 skipped: already exists</span><br><span class="line">Copying blob 116545f99854 skipped: already exists</span><br><span class="line">Copying blob 9762cab69057 skipped: already exists</span><br><span class="line">Copying blob 79f98701f9d8 skipped: already exists</span><br><span class="line">Copying blob e837237b2223 skipped: already exists</span><br><span class="line">Copying blob ebb0ebcc01bc skipped: already exists</span><br><span class="line">Copying config 28948ca129 done</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Pod:</span><br><span class="line">21082c4f513294020c6ed2cb47458292ce55b208b649eeb3b1b5f54052037370</span><br><span class="line">Containers:</span><br><span class="line">27b3f08f0ceac85cfb69c907269c2e68a5e0c2b5e63f38565113bb119abd09bd</span><br><span class="line">a862da1477a23fb08fcb6b5fe23c55fb3c16f0e6fb4a0b6ee1119e4152e62942</span><br></pre></td></tr></table></figure><h1 id="動作確認"><a href="#動作確認" class="headerlink" title="動作確認"></a>動作確認</h1><p>最初は立ち上がってくるまでに数分がかかる<br>数分後にcurlコマンドでコンテナが動いているか確認</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">curl -I localhost:3000</span></span><br><span class="line"></span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Type: text/html</span><br><span class="line">X-Frame-Options: sameorigin</span><br><span class="line">X-XSS-Protection: 1; mode=block</span><br><span class="line">X-Content-Type-Options: nosniff</span><br><span class="line">Content-Security-Policy: default-src &#x27;none&#x27;; script-src &#x27;self&#x27;; style-src &#x27;self&#x27; &#x27;unsafe-inline&#x27;; img-src &#x27;self&#x27; data:; font-src &#x27;self&#x27; data:; connect-src &#x27;self&#x27;; manifest-src &#x27;self&#x27;; media-src &#x27;self&#x27; blob: https://*.googlevideo.com:443 https://*.youtube.com:443; child-src &#x27;self&#x27; blob:; frame-src &#x27;self&#x27;; frame-ancestors &#x27;none&#x27;</span><br><span class="line">Referrer-Policy: same-origin</span><br><span class="line">Permissions-Policy: interest-cohort=()</span><br><span class="line">Content-Length: 0</span><br></pre></td></tr></table></figure><h1 id="公開"><a href="#公開" class="headerlink" title="公開"></a>公開</h1><p>ファイアウォール設定を変更し、3000番が通るようにする。  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> firewall-cmd --permanent --add-port=3000/tcp</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">sudo</span> firewall--cmd --reload</span></span><br></pre></td></tr></table></figure><p>3000番以外のポートを使用した場合は、ymlファイルの28行目を編集する。</p><p>うちの環境ではnginxをSSLアクセラレータにして、以下のような設定で動かしている</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">  <span class="attribute">listen</span> <span class="number">443</span> ssl http2;</span><br><span class="line">  <span class="attribute">listen</span> [::]:<span class="number">443</span> ssl http2;</span><br><span class="line">  <span class="attribute">server_name</span> &lt;ドメイン名&gt;;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># ssl on;</span></span><br><span class="line">  <span class="attribute">ssl_certificate</span>       &lt;証明書&gt;;</span><br><span class="line">  <span class="attribute">ssl_certificate_key</span>   &lt;秘密鍵&gt;;</span><br><span class="line">  <span class="attribute">ssl_protocols</span>         TLSv1.<span class="number">2</span> TLSv1.<span class="number">3</span>;</span><br><span class="line">  <span class="attribute">ssl_ciphers</span>           HIGH:!aNULL:!MD5;</span><br><span class="line">  <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">10m</span>;</span><br><span class="line">  <span class="attribute">ssl_session_timeout</span>  <span class="number">10m</span>;</span><br><span class="line"></span><br><span class="line">  <span class="section">location</span> / &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://&lt;Invidiousを立てたサーバ&gt;:3000;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> Host               <span class="variable">$host</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Real-IP          <span class="variable">$remote_addr</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-For    <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Proto  <span class="variable">$scheme</span>;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> X-Forwarded-Port   <span class="variable">$remote_port</span>;</span><br><span class="line">    <span class="attribute">port_in_redirect</span>                    <span class="literal">off</span>;</span><br><span class="line">    <span class="attribute">add_header</span>      Front-End-Https     <span class="literal">on</span>;</span><br><span class="line">    <span class="attribute">add_header</span> <span class="string">&#x27;Strict-Transport-Security&#x27;</span> <span class="string">&#x27;max-age=15552000;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h1 id=&quot;概要&quot;&gt;&lt;a href=&quot;#概要&quot; class=&quot;headerlink&quot; title=&quot;概要&quot;&gt;&lt;/a&gt;概要&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://invidious.io/&quot;&gt;Invidious&lt;/a&gt; というYoutubeのフロントエンドをRHEL 9.3で動かしてみたメモです。&lt;br&gt;RHELにはDockerの代わりにPodmanが採用されているのでPodman上でコンテナを走らせてみます。&lt;/p&gt;</summary>
    
    
    
    <category term="サーバ" scheme="http://lunatic.red/categories/%E3%82%B5%E3%83%BC%E3%83%90/"/>
    
    <category term="環境構築" scheme="http://lunatic.red/categories/%E3%82%B5%E3%83%BC%E3%83%90/%E7%92%B0%E5%A2%83%E6%A7%8B%E7%AF%89/"/>
    
    
    <category term="サーバ" scheme="http://lunatic.red/tags/%E3%82%B5%E3%83%BC%E3%83%90/"/>
    
    <category term="広告ブロック" scheme="http://lunatic.red/tags/%E5%BA%83%E5%91%8A%E3%83%96%E3%83%AD%E3%83%83%E3%82%AF/"/>
    
  </entry>
  
</feed>
